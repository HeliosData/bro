##! Implements base functionality for mongodb analysis.
##! Generates the Mongodb.log file.

# Generated by binpac_quickstart

module Mongodb;

export {
    redef enum Log::ID += { LOG };

    type Info: record {
        ## Timestamp for when the event happened.
        ts:     time    &log;
        ## Unique ID for the connection.
        uid:    string  &log;
        ## The connection's 4-tuple of endpoint addresses/ports.
        id:     conn_id &log;
        # operation name based on opcode
        cmd:    string  &log;
        # database name
        db:     string  &log;
        #  request msg encoding with base64
        req:    string  &log;
        # ## TODO: Add other fields here that you'd like to log.
    };

    ## Event that can be handled to access the mongodb record as it is sent on
    ## to the loggin framework.
    global log_mongodb: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):

const ports = { 27017/tcp };


redef likely_server_ports += { ports };

event bro_init() &priority=5
    {
    Log::create_stream(Mongodb::LOG, [$columns=Info, $ev=log_mongodb, $path="mongodb"]);

    # TODO: If you're using port-based DPD, uncomment this.
    Analyzer::register_for_ports(Analyzer::ANALYZER_MONGODB, ports);
    }

event mongodb_event(c: connection)
    {
    local info: Info;
    info$ts  = network_time();
    info$uid = c$uid;
    info$id  = c$id;

    Log::write(Mongodb::LOG, info);
    }

event mongodb_query_event(c: connection, op: string, db: string, req_msg: string)
    {
    local info: Info;
    info$ts  = network_time();
    info$uid = c$uid;
    info$id  = c$id;
    info$cmd = op;
    info$db  = db;
    info$req = req_msg;

    Log::write(Mongodb::LOG, info);
    }
