# Generated by binpac_quickstart

refine flow MONGODB_Flow += {
    function proc_mongodb_message(msg: MONGODB_PDU): bool
    %{
        BifEvent::generate_mongodb_event(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn());
        return true;
    %}

     function encode (data :string) : string
    %{
        static constexpr char sEncodingTable[] = {
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
            'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
            'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
            'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
            'w', 'x', 'y', 'z', '0', '1', '2', '3',
            '4', '5', '6', '7', '8', '9', '+', '/'
        };

        size_t in_len = data.size();
        size_t out_len = 4 * ((in_len + 2) / 3);
        std::string ret(out_len, '\0');
        size_t i;
        char *p = const_cast<char*>(ret.c_str());

        for (i = 0; i < in_len - 2; i += 3) {
            *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
            *p++ = sEncodingTable[((data[i] & 0x3) << 4) | ((int) (data[i + 1] & 0xF0) >> 4)];
            *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2) | ((int) (data[i + 2] & 0xC0) >> 6)];
            *p++ = sEncodingTable[data[i + 2] & 0x3F];
        }

        if (i < in_len) {
            *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
            if (i == (in_len - 1)) {
                *p++ = sEncodingTable[((data[i] & 0x3) << 4)];
                *p++ = '=';
            }
            else {
                *p++ = sEncodingTable[((data[i] & 0x3) << 4) | ((int) (data[i + 1] & 0xF0) >> 4)];
                *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2)];
            }
            *p++ = '=';
        }

        return ret;
    %}

    function proc_client_message(req_msg: Client_Message, code: int): bool
    %{
        bytestring msg, dbname; //collection;
        StringVal *cmd = NULL;

        switch ((OPCODE)code) {
            case OP_QUERY:
                msg = ${req_msg.query.request};
                dbname = ${req_msg.query.db};
                //collection = ${req_msg.query.collection};
                cmd = new StringVal("query");
                break;
            case OP_INSERT:
                msg = ${req_msg.insert.request};
                dbname = ${req_msg.insert.db};
                //collection = ${req_msg.insert.collection};
                cmd = new StringVal("insert");
                break;
            case OP_UPDATE:
                msg = ${req_msg.update.request};
                dbname = ${req_msg.update.db};
                //collection = ${req_msg.update.collection};
                cmd = new StringVal("update");
                break;
            case OP_DELETE:
                msg = ${req_msg.del.request};
                dbname = ${req_msg.del.db};
                //collection = ${req_msg.del.collection};
                cmd = new StringVal("delete");
                break;
            case OP_COMMAND:
                msg = ${req_msg.command.request};
                dbname = ${req_msg.command.db};
                cmd = bytestring_to_val(${req_msg.command.command});
                break;
            default:
                break;
        }

        if (cmd) {
            string query = encode(std_str(msg));
            StringVal *val = new StringVal(query);
            //printf("enter query db %s, op %s, msg %s, len %d\n", c_str(dbname), cmd->Bytes(), val->Bytes(), val->Len());

            BifEvent::generate_mongodb_query_event(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn(),
                    cmd, bytestring_to_val(dbname),val); 
        }

        return true;
    %}


    function proc_server_message(reply_msg: Server_Message, code: int): bool
    %{
        return true;
    %}

};

refine typeattr MONGODB_PDU += &let {
    proc = $context.flow.proc_mongodb_message(this);
};

refine typeattr Client_Message += &let {
    proc = $context.flow.proc_client_message(this, hdr.opcode);
};

refine typeattr Server_Message += &let {
    proc = $context.flow.proc_server_message(this, hdr.opcode);
};
