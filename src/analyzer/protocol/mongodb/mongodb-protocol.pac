# Generated by binpac_quickstart

# ## TODO: Add your protocol structures in here.
# ## some examples:

# Types are your basic building blocks.
# There are some builtins, or you can define your own.
# Here's a definition for a regular expression:
# type MONGODB_WHITESPACE = RE/[ \t]*/;

# A record is a collection of types.
# Here's one with the built-in types
%include ./consts.pac

type NUL_String = RE/[^\0]*/;
type DOT_String = RE/[^\x2e]*/;

type MONGODB_PDU(is_orig: bool) = record {
    hdr             : Header;
    msg             : case is_orig of {
       false        -> server_msg      : Server_Message(hdr);
       true         -> client_msg      : Client_Message(hdr);
      };
} &length=hdr.msglen &byteorder=littleendian;

type Header = record {
    msglen          : int32;
    reqid           : int32;
    rspto           : int32;
    opcode          : int32;
} &length=16;

type Client_Message(hdr: Header) = case hdr.opcode of {
    #OP_RESVD        -> none            : empty;
    OP_MSG          -> msg          : Command_OP_Msg;
    OP_QUERY        -> query        : Command_OP_Query;
    OP_UPDATE       -> update       : Command_OP_Update;
    OP_INSERT       -> insert       : Command_OP_Insert;
    OP_DELETE       -> del          : Command_OP_Delete;
    OP_COMMAND      -> command      : Command_OP_Command;
    #OP_MESSAGE     -> msg_req      : Command_OP_Message;
    OP_GET_MORE     -> get_more     : Command_OP_Get_More;
    OP_KILL_CURSORS -> kill_cur     : Command_OP_Kill_Cursors;
};

type Server_Message(hdr: Header) = case hdr.opcode of {
    OP_REPLY        -> reply_rsp        : Command_OP_Reply;
    OP_COMMANDREPLY ->commandreply_rsp  : Command_OP_CommandReply;
};

type Command_OP_Update = record {
    resv            : int32;
    db              : DOT_String;
    dot             : uint8;
    collection      : NUL_String ;
    flags           : int32;
    request         : bytestring &restofdata;
#selector        : Document;
#update          : Document;
};

type Command_OP_Insert = record {
    flags           : int32;
    db              : DOT_String;
    dot             : uint8;
    collection      : NUL_String ;
    request           : bytestring &restofdata;
#documents       : Documents;
};

type Documents = Document[]&until($input.length() == 0)

type Command_OP_Query = record {
    flags           : int32;
    db              : DOT_String;
    dot             : uint8;
    collection      : NUL_String;
    numtoskip       : int32;
    numtokenreturn  : int32;
    request         : bytestring &restofdata;
    #query           : int8[] &until($input.length() == 0);
};

type Command_OP_Get_More = record {
    zero            : int32;
    db              : DOT_String;
    dot             : uint8;
    collection      : NUL_String;
    numtoreturn     : int32;
    cursorid        : int64;
};

type Command_OP_Delete = record {
    zero            : int32;
    db              : DOT_String;
    dot             : uint8;
    collection      : NUL_String;
    flags           : int32;
    request         : bytestring &restofdata;
#selector        : Document;
}

type Command_OP_Kill_Cursors = record {
    zero            : int32;
    numberofcurids  : int32;
    cursorsid       : int64[numberofcurids];
};

type Command_OP_Message = record {
};

type Command_OP_Command = record {
    db           : NUL_String; # the name of the database to run the command on
    command      : NUL_String;
    request      : bytestring &restofdata;
#metadata        : Document; #a BSON Document containing any metadata
#commandargs     : Document;  # a BSON Document containing the command arguments
    #inputdoc
};

type Command_OP_Msg = record {
    flagbits        : uint32; #message flags;
    sections        : Sections;
#checksum        : uint32; #optional CRC-32C checksum
};

type Sections = Section[] &until($input.length() == 0)

type Section = record {
    len             : int32;
    docid           : NUL_String ;
    documents       : Documents;
};

type Command_OP_Reply = record {
    responseflags   : int32;
    cursorid        : int32;
    startingfrom    : int32;
    numreturned     : int32;
    request         : bytestring &restofdata;
#documents       : Document; #documents;
};

type Command_OP_CommandReply = record {
    metadata        : Document;
    commandreplyi   : Document;
    outputdocs      : Document;
};

type Document = record {
    documentlength  : int32;
    elements        : Elements;
};

type Elements = Element[] &until($input.length() == 0)

# "Aggergation command"
#db.collection.aggregate()   Provides access to the aggregation pipeline.
#db.collection.count()   Wraps count to return a count of the number of documents in a collection or matching a query.
#db.collection.distinct()    Returns an array of documents that have distinct values for the specified field.
#db.collection.group()   Deprecated. Provides simple data aggregation function. Groups documents in a collection by a key, and processes the results. Use aggregate() for more complex data aggregation.

#find operation
#db.collection.find()    Performs a query on a collection and returns a cursor object.
#db.collection.findAndModify()   Atomically modifies and returns a single document.
#db.collection.findOne() Performs a query and returns a single document.
#db.collection.findOneAndDelete()    Finds a single document and deletes it.
#db.collection.findOneAndReplace()   Finds a single document and replaces it.
#db.collection.findOneAndUpdate()    Finds a single document and updates it.

#db.collection.bulkWrite()   Provides bulk write operation functionality.
#db.collection.copyTo()  Deprecated. Wraps eval to copy data between collections in a single MongoDB instance.
#db.collection.createIndex() Builds an index on a collection.
#db.collection.dataSize()    Returns the size of the collection. Wraps the size field in the output of the collStats.

#delete operation
#db.collection.deleteOne()   Deletes a single document in a collection.
#db.collection.deleteMany()  Deletes multiple documents in a collection.
#db.collection.drop()    Removes the specified collection from the database.
#db.collection.dropIndex()   Removes a specified index on a collection.
#db.collection.dropIndexes() Removes all indexes on a collection.
#db.collection.remove()  Deletes documents from a collection.

#db.collection.ensureIndex() Deprecated. Use db.collection.createIndex().
#db.collection.explain() Returns information on the query execution of various methods.
#db.collection.getIndexes()  Returns an array of documents that describe the existing indexes on a collection.
#db.collection.getShardDistribution()    For collections in sharded clusters, db.collection.getShardDistribution() reports data of chunk distribution.
#db.collection.getShardVersion() Internal diagnostic method for shard cluster.

#insert operation
#db.collection.insert()  Creates a new document in a collection.
#db.collection.insertOne()   Inserts a new document in a collection.
#db.collection.insertMany()  Inserts several new document in a collection.

#db.collection.isCapped()    Reports if a collection is a capped collection.
#db.collection.latencyStats()    Returns latency statistics for a collection.
#db.collection.mapReduce()   Performs map-reduce style data aggregation.
#db.collection.reIndex() Rebuilds all existing indexes on a collection.
#db.collection.replaceOne()  Replaces a single document in a collection.
#db.collection.renameCollection()    Changes the name of a collection.
#db.collection.save()    Provides a wrapper around an insert() and update() to insert new documents.

#statistical
#db.collection.stats()   Reports on the state of a collection. Provides a wrapper around the collStats.
#db.collection.storageSize() Reports the total size used by the collection in bytes. Provides a wrapper around the storageSize field of the collStats output.
#db.collection.totalSize()   Reports the total size of a collection, including the size of all documents and all indexes on a collection.
#db.collection.totalIndexSize()  Reports the total size used by the indexes on a collection. Provides a wrapper around the totalIndexSize field of the collStats output.

#update
#db.collection.update()  Modifies a document in a collection.
#db.collection.updateOne()   Modifies a single document in a collection.
#db.collection.updateMany()  Modifies multiple documents in a collection.
#db.collection.validate()    Performs diagnostic operations on a collection.

#db.createRole() Creates a role and specifies its privileges.
#db.updateRole() Updates a user-defined role.
#db.dropRole()   Deletes a user-defined role.
#db.dropAllRoles()   Deletes all user-defined roles associated with a database.
#db.grantPrivilegesToRole()  Assigns privileges to a user-defined role.
#db.revokePrivilegesFromRole()   Removes the specified privileges from a user-defined role.
#db.grantRolesToRole()   Specifies roles from which a user-defined role inherits privileges.
#db.revokeRolesFromRole()    Removes inherited roles from a role.
#db.getRole()    Returns information for the specified role.
#db.getRoles()


#Following command is Authentication Commands
#db.auth()
#Name    Description
#logout  Terminates the current authenticated session.
#authenticate    Starts an authenticated session using a username and password.
#copydbgetnonce  This is an internal command to generate a one-time password for use with the copydb command.
#getnonce    This is an internal command to generate a one-time password for authentication.
#authSchemaUpgrade   Supports the upgrade process for user data between version 2.4 and 2.6.

#Following command is by Administator
#Name    Description
#renameCollection    Changes the name of an existing collection.
#copydb  Copies a database from a remote host to the current host.
#dropDatabase    Removes the current database.
#listCollections Returns a list of collections in the current database.
#drop    Removes the specified collection from the database.
#create  Creates a collection and sets collection parameters.
#clone   Copies a database from a remote host to the current host.
#cloneCollection Copies a collection from a remote host to the current host.
#cloneCollectionAsCapped Copies a non-capped collection as a new capped collection.
#convertToCapped Converts a non-capped collection to a capped collection.
#filemd5 Returns the md5 hash for files stored using GridFS.
#createIndexes   Builds one or more indexes for a collection.
#listIndexes Lists all indexes for a collection.
#dropIndexes Removes indexes from a collection.
#fsync   Flushes pending writes to the storage layer and locks the database to allow backups.
#clean   Internal namespace administration command.
#connPoolSync    Internal command to flush connection pool.
#connectionStatus    Reports the authentication state for the current connection.
#compact Defragments a collection and rebuilds the indexes.
#collMod Add flags to collection to modify the behavior of MongoDB.
#reIndex Rebuilds all indexes on a collection.
#setParameter    Modifies configuration options.
#getParameter    Retrieves configuration options.
#repairDatabase  Repairs any errors and inconsistencies with the data storage.
#repairCursor    Returns a cursor that iterates over all valid documents in a collection.
#touch   Loads documents and indexes from data storage to memory.
#shutdown    Shuts down the mongod or mongos process.
#logRotate   Rotates the MongoDB logs to prevent a single file from taking too much space.
#killOp  Terminates an operation as specified by the operation ID.
#setFeatureCompatibilityVersion  Enables or disables MongoDB 3.4 features that persist data that are backwards-incompatible with MongoDB 3.2.
#
type Element  = record {
    type            : uint8;
    name            : NUL_String;
    value           : case type of {
#BSON_ELEMENT_TYPE_DOUBLE        -> doube_val        : Element_Double;
    BSON_ELEMENT_TYPE_STRING        -> str_val       : Element_String;
    BSON_ELEMENT_TYPE_DOC           -> doccument_val : Document;
    #BSON_ELEMENT_TYPE_ARRAY        ->  ;
#BSON_ELEMENT_TYPE_BINARY        -> binary_val       : Element_Binary;
#BSON_ELEMENT_TYPE_UNDEF         -> undefined_val    : empty;#Deprecated
#BSON_ELEMENT_TYPE_OBJ_ID        -> objid_val        : Element_ObjID;
    BSON_ELEMENT_TYPE_BOOL          -> bool_val         : uint8;
#BSON_ELEMENT_TYPE_DATETIME      -> date_val         : Element_Date;
    BSON_ELEMENT_TYPE_NULL          -> null_val         : empty;
#BSON_ELEMENT_TYPE_REGEX         -> regex_val        : Element_Regex;
#BSON_ELEMENT_TYPE_DB_PTR        -> dbptr_val        : Element_Dbptr;# Deprecated */
    BSON_ELEMENT_TYPE_JS_CODE       -> js_code_val      : Element_String;
    BSON_ELEMENT_TYPE_SYMBOL        -> symbol_val       : Element_String;
#BSON_ELEMENT_TYPE_JS_CODE_SCOPE -> js_code_scope_val: Element_JS_Code_Scope;
    BSON_ELEMENT_TYPE_INT32         -> int32_val        : int32; # 0x10 */
#BSON_ELEMENT_TYPE_TIMESTAMP     -> timestamp_val    : Element_Timestamp;  # 0x11 */
    BSON_ELEMENT_TYPE_INT64         -> int64_val        : int64;  # 0x12 */
    BSON_ELEMENT_TYPE_MIN_KEY       -> min_key_val      : empty;  # 0xFF */
    BSON_ELEMENT_TYPE_MAX_KEY       -> max_key_val      : empty;  # 0x7F */
    };
#} &let {
#    update_operation  : bool = $context.connection.set_operation_from_elname(this);
};

type Element_String = record {
    len      : int32;
    value    : bytestring &length=len;
};

#type Element_Double = record {
#};
#
#
#type Element_Binary = record {
#};
#
#type Element_ObjID = record {
#};
#
#type Element_Date = record {
#};
#
#type Element_Regex = record {
#};
#type Element_Dbptr = record {
#};
#type Element_JS_Code = record {
#};
#
#type Element_Symbol = record {
#};
#type Element_JS_Code_Scope = record {
#};
#
#type Element_Timestamp = record {
#};

refine connection MONGODB_Conn += {
	%member{
        int32_t opcode;
	%}

   %init{
    %}
};

